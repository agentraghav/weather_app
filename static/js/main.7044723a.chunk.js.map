{"version":3,"sources":["services/action.js","components/weather-body.js","App.js","index.js"],"names":["API_KEY","API_CALL","fetchWeather","loc","a","axios","get","response","data","WeatherBody","useState","setLoc","city","setCity","temp","setTemp","desc","setDesc","icon","setIcon","country","setCountry","hum","setHum","feels","setFeels","useEffect","console","log","weather","description","sys","main","humidity","te","Math","floor","te1","feels_like","check","className","alt","src","id","type","placeholder","onChange","e","target","value","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOACMA,EAAU,mCACVC,EAAW,qD,SAEFC,E,8EAAf,WAA4BC,GAA5B,iBAAAC,EAAA,sEACyBC,IAAMC,IAAN,UAAaL,GAAb,OAAwBE,EAAxB,kBAAqCH,IAD9D,cACQO,EADR,gBAEqBA,EAASC,KAF9B,cAEQA,EAFR,yBAGSA,GAHT,4C,gCCDaC,EAAc,WAAO,IAAD,EACTC,mBAAS,WADA,mBACxBP,EADwB,KACnBQ,EADmB,OAEPD,mBAAS,IAFF,mBAExBE,EAFwB,KAElBC,EAFkB,OAGPH,mBAAS,IAHF,mBAGxBI,EAHwB,KAGlBC,EAHkB,OAIPL,mBAAS,IAJF,mBAIxBM,EAJwB,KAIlBC,EAJkB,OAKPP,mBAAS,IALF,mBAKxBQ,EALwB,KAKlBC,EALkB,OAMDT,mBAAS,IANR,mBAMxBU,EANwB,KAMfC,EANe,OAOTX,mBAAS,IAPA,mBAOxBY,EAPwB,KAOnBC,EAPmB,OAQLb,mBAAS,IARJ,mBAQxBc,EARwB,KAQjBC,EARiB,KAiC/B,OApBAC,qBAAU,WAAM,4CACd,gCAAAtB,EAAA,sEACyBF,EAAaC,GADtC,OACQI,EADR,OAEEoB,QAAQC,IAAIrB,GACZoB,QAAQC,IAAIrB,EAASsB,QAAQ,GAAGX,MAChCD,EAAQV,EAASsB,QAAQ,GAAGC,aAC5BT,EAAWd,EAASwB,IAAIX,SACxBG,EAAOhB,EAASyB,KAAKC,UACjBC,EAAKC,KAAKC,MAAM7B,EAASyB,KAAKlB,KAAO,QACrCuB,EAAMF,KAAKC,MAAM7B,EAASyB,KAAKM,WAAa,QAChDzB,EAAQV,GACRsB,EAASY,GACTtB,EAAQmB,GACRf,EAAQ,oCAAD,OAC+BZ,EAASsB,QAAQ,GAAGX,KADnD,YAZT,6CADc,uBAAC,WAAD,wBAiBdqB,KACC,CAACpC,IAGF,qBAAKqC,UAAU,kBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,SAAf,SACE,uBAAMA,UAAU,OAAhB,UACG5B,EADH,IACUQ,EAAS,IACjB,qBACEqB,IAAI,OACJC,IAAG,sCAAiCtB,EAAjC,yBAKT,sBAAMoB,UAAU,eAAhB,SACE,qBAAKE,IAAKxB,EAAMuB,IAAI,oBAAoBD,UAAU,WAEpD,qBAAKA,UAAU,UAAf,SACE,sBAAMG,GAAG,OAAT,SAAiB3B,MAEnB,sBAAKwB,UAAU,OAAf,iCAA2C1B,EAA3C,WACA,sBAAK0B,UAAU,OAAf,sBAAgClB,EAAhC,OACA,sBAAKkB,UAAU,OAAf,iCACuB1B,EADvB,sBACiDU,EADjD,WAGA,qBAAKgB,UAAU,SAAf,SACE,uBACEI,KAAK,OACLJ,UAAU,WACVK,YAAY,cACZC,SAtDS,SAACC,GACpBpC,EAAOoC,EAAEC,OAAOC,oBCHLC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7044723a.chunk.js","sourcesContent":["import axios from 'axios';\nconst API_KEY = 'b79c53789d71b2773271fb04741a9f56';\nconst API_CALL = 'https://api.openweathermap.org/data/2.5/weather?q=';\n\nasync function fetchWeather(loc) {\n  const response = await axios.get(`${API_CALL}${loc}&appid=${API_KEY}`);\n  const data = await response.data;\n  return data;\n}\n\nexport { fetchWeather };\n","import React, { useState, useEffect } from 'react';\nimport { fetchWeather } from '../services/action';\nimport '../styles/styles.css';\nexport const WeatherBody = () => {\n  const [loc, setLoc] = useState('jodhpur');\n  const [city, setCity] = useState('');\n  const [temp, setTemp] = useState('');\n  const [desc, setDesc] = useState('');\n  const [icon, setIcon] = useState('');\n  const [country, setCountry] = useState('');\n  const [hum, setHum] = useState('');\n  const [feels, setFeels] = useState('');\n  const handleChange = (e) => {\n    setLoc(e.target.value);\n  };\n\n  useEffect(() => {\n    async function check() {\n      const response = await fetchWeather(loc);\n      console.log(response);\n      console.log(response.weather[0].icon);\n      setDesc(response.weather[0].description);\n      setCountry(response.sys.country);\n      setHum(response.main.humidity);\n      let te = Math.floor(response.main.temp - 273.15);\n      let te1 = Math.floor(response.main.feels_like - 273.15);\n      setCity(loc);\n      setFeels(te1);\n      setTemp(te);\n      setIcon(\n        `http://openweathermap.org/img/wn/${response.weather[0].icon}@2x.png`\n      );\n    }\n    check();\n  }, [loc]);\n\n  return (\n    <div className='container-fluid'>\n      <div className='row'>\n        <div className='col-md-12 card'>\n          <div className='header'>\n            <span className='city'>\n              {city},{country}{' '}\n              <img\n                alt='flag'\n                src={`https://www.countryflags.io/${country}/\nflat/64.png`}\n              />\n            </span>\n          </div>\n          <span className='weather-icon'>\n            <img src={icon} alt='icon for forecast' className='icon' />\n          </span>\n          <div className='weather'>\n            <span id='desc'>{desc}</span>\n          </div>\n          <div className='temp'>Current Temperature {temp}&deg;C</div>\n          <div className='temp'>Humidity {hum}%</div>\n          <div className='temp'>\n            Current Temperature {temp}&deg;C | Feels Like {feels}&deg;C\n          </div>\n          <div className='search'>\n            <input\n              type='text'\n              className='location'\n              placeholder='Search city'\n              onChange={handleChange}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { WeatherBody } from './components/weather-body';\n\nfunction App() {\n  return (\n    <div>\n      <WeatherBody />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}